/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-02-28 06:42:19.793355
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=((0.5)*x1);
x7=((0.5)*x0);
x8=((0.06363961)*x1);
x9=((0.06363961)*x0);
x10=((0.0383412812906507)*x2);
x11=((0.0383412812906507)*x4);
x12=((0.101983720024565)*x2);
x13=((0.101983720024565)*x4);
x14=((0.14422676)*x2);
x15=((0.14422676)*x4);
x16=((0.05422276)*x2);
x17=((0.05422276)*x4);
x18=((((-1.0)*x6))+x7);
x19=((((-1.0)*x7))+x6);
x20=(x7+x6);
x21=((-1.0)*x20);
x22=(x18*x4);
x23=(x15*x18);
x24=(x2*x21);
x25=(x17*x20);
x26=(x15*x20);
eetrans[0]=((0.012197)+((x3*((((x17*x18))+((x16*x18))))))+((x5*(((((-0.05422276)*x19*x2))+(((-0.05422276)*x22))))))+((x3*((((x14*x19))+x23))))+(((-0.0222740008564773)*x1))+((x2*(((((-1.0)*x9))+x8))))+(((0.0215669991435227)*x0))+((x5*((((x14*x18))+x23)))));
eetrans[1]=((0.031289)+(((0.0222740008564773)*x0))+((x3*((((x14*x21))+x26))))+((x3*((((x16*x20))+x25))))+((x5*((((x14*x20))+x26))))+((x5*(((((-1.0)*x25))+(((-1.0)*x16*x21))))))+(((0.0215669991435227)*x1))+((x2*(((((-1.0)*x9))+(((-1.0)*x8)))))));
IkReal x27=((1.0)*x11);
eetrans[2]=((0.002125)+((x3*((x13+x12))))+((x5*(((((-1.0)*x13))+x12))))+(((0.0899999995661344)*x4))+((x3*(((((-1.0)*x27))+x10))))+((x5*(((((-1.0)*x27))+(((-1.0)*x10)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.012197)+px);
new_py=((-0.031289)+py);
new_pz=((-0.002125)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.11342471163066)+(((-36.0556833278519)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((1.11342471163066)+(((-36.0556833278519)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x28=IKasin(((1.11342471163066)+(((-36.0556833278519)*(pz*pz)))));
j2array[0]=((1.14500576075206)+(((-1.0)*x28)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((4.28659841434186)+x28);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((64.5155704647748)*pz))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((67132.6257485078)*(pz*pz*pz))));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((-67132.6257485078)*(pz*pz*pz)))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((-64.5155704647748)*pz)));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x29=pz*pz;
IkReal x30=cj2*cj2;
IkReal x31=((2.65989337318868)*cj2);
IkReal x32=(cj2*x29);
j1eval[0]=((1.01284908435285)+(((-2767.79117144608)*sj2*x29))+(((2.58805045442982)*x30))+(((-1.0)*sj2))+(((-1.0)*x31))+(((2.26630490036001)*cj2*sj2))+(((2358.23689710606)*sj2*x32))+(((1040.56470809883)*x32))+(((2693.03396565881)*x29*x30))+(((-3746.9689774666)*x29)));
j1eval[1]=((-1.17366969147273)+sj2+(((-32.2577852323874)*cj2*pz))+(((85.8022691733707)*pz*sj2))+(((37.8599848412898)*pz))+x31);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x33=cj2*cj2;
IkReal x34=pz*pz;
IkReal x35=pz*pz*pz;
IkReal x36=(cj2*pz);
IkReal x37=(cj2*sj2);
IkReal x38=(pz*sj2);
IkReal x39=(sj2*x34);
IkReal x40=(cj2*x35);
IkReal x41=(cj2*x34);
IkReal x42=(x33*x34);
CheckValue<IkReal> x43=IKPowWithIntegerCheck(((5.44126387176865e+20)+(((5.59015873133096e+23)*x41))+(((1.26690041266057e+24)*x34*x37))+(((-1.486922616454e+24)*x39))+(((1.44676128449559e+24)*x42))+(((-1.4289573775481e+21)*cj2))+(((-5.37223556384542e+20)*sj2))+(((-2.01295999973716e+24)*x34))+(((1.21751237842312e+21)*x37))+(((1.39036166923142e+21)*x33))),-1);
if(!x43.valid){
continue;
}
CheckValue<IkReal> x44=IKPowWithIntegerCheck(((-0.06363961)+(((0.05422276)*sj2))+(((4.65243584884308)*x38))+(((0.14422676)*cj2))+(((2.05287287165289)*pz))+(((-1.74910614678729)*x36))),-1);
if(!x44.valid){
continue;
}
if( IKabs(((x43.value)*(((-1.43155677161667e+21)+(((-3.6579399740405e+21)*x33))+(((2.18190294501537e+23)*x34*x37))+(((-8.03756273038909e+24)*x35*x37))+(((2.14053651168872e+22)*pz))+(((2.49166601875669e+23)*x42))+(((-1.03327689854775e+23)*pz*x33))+(((1.41339592811238e+21)*sj2))+(((9.62757899287411e+22)*x41))+(((-2.56083335629964e+23)*x39))+(((-1.28479107649246e+23)*x34))+(((3.75948246287797e+21)*cj2))+(((-3.48552024598969e+22)*x38))+(((-5.68316249847226e+24)*sj2*x35))+(((-2.57751874387248e+24)*x40))+(((-3.20318611802997e+21)*x37))+(((7.03833565982194e+24)*x33*x35))+(((1.17997042075563e+23)*sj2*x36))+(((-5.34166780355363e+24)*x35))+(((9.13714522206716e+22)*x36)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x44.value)*(((-0.189351664496956)+(((-9.71725641788473)*x41))+(((0.142656120127684)*cj2))+(((11.4048493419402)*x34))+(((-0.379450068572434)*sj2))+(((25.8468659515067)*x39))+(((-0.707106781186548)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x43.value)*(((-1.43155677161667e+21)+(((-3.6579399740405e+21)*x33))+(((2.18190294501537e+23)*x34*x37))+(((-8.03756273038909e+24)*x35*x37))+(((2.14053651168872e+22)*pz))+(((2.49166601875669e+23)*x42))+(((-1.03327689854775e+23)*pz*x33))+(((1.41339592811238e+21)*sj2))+(((9.62757899287411e+22)*x41))+(((-2.56083335629964e+23)*x39))+(((-1.28479107649246e+23)*x34))+(((3.75948246287797e+21)*cj2))+(((-3.48552024598969e+22)*x38))+(((-5.68316249847226e+24)*sj2*x35))+(((-2.57751874387248e+24)*x40))+(((-3.20318611802997e+21)*x37))+(((7.03833565982194e+24)*x33*x35))+(((1.17997042075563e+23)*sj2*x36))+(((-5.34166780355363e+24)*x35))+(((9.13714522206716e+22)*x36))))))+IKsqr(((x44.value)*(((-0.189351664496956)+(((-9.71725641788473)*x41))+(((0.142656120127684)*cj2))+(((11.4048493419402)*x34))+(((-0.379450068572434)*sj2))+(((25.8468659515067)*x39))+(((-0.707106781186548)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x43.value)*(((-1.43155677161667e+21)+(((-3.6579399740405e+21)*x33))+(((2.18190294501537e+23)*x34*x37))+(((-8.03756273038909e+24)*x35*x37))+(((2.14053651168872e+22)*pz))+(((2.49166601875669e+23)*x42))+(((-1.03327689854775e+23)*pz*x33))+(((1.41339592811238e+21)*sj2))+(((9.62757899287411e+22)*x41))+(((-2.56083335629964e+23)*x39))+(((-1.28479107649246e+23)*x34))+(((3.75948246287797e+21)*cj2))+(((-3.48552024598969e+22)*x38))+(((-5.68316249847226e+24)*sj2*x35))+(((-2.57751874387248e+24)*x40))+(((-3.20318611802997e+21)*x37))+(((7.03833565982194e+24)*x33*x35))+(((1.17997042075563e+23)*sj2*x36))+(((-5.34166780355363e+24)*x35))+(((9.13714522206716e+22)*x36))))), ((x44.value)*(((-0.189351664496956)+(((-9.71725641788473)*x41))+(((0.142656120127684)*cj2))+(((11.4048493419402)*x34))+(((-0.379450068572434)*sj2))+(((25.8468659515067)*x39))+(((-0.707106781186548)*pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x45=IKcos(j1);
IkReal x46=IKsin(j1);
IkReal x47=((0.707106781186548)*pz);
IkReal x48=((0.14422676)*cj2);
IkReal x49=((0.05422276)*sj2);
IkReal x50=((0.14422676)*sj2);
IkReal x51=((0.05422276)*cj2);
IkReal x52=((0.0219205)*x45);
IkReal x53=((0.0219205)*x46);
IkReal x54=((0.06363961)*x45);
IkReal x55=((0.06363961)*x46);
IkReal x56=(x45*x47);
IkReal x57=(x46*x47);
IkReal x58=(x56+x53);
evalcond[0]=((0.0146806993654221)+(((0.179999999132269)*pz*x45))+(((0.00558004828402)*x46))+(((-1.0)*(pz*pz))));
evalcond[1]=((-0.06363961)+x48+x49+x58+x52+(((-1.0)*x57)));
evalcond[2]=((0.06363961)+x50+x52+(((-1.0)*x58))+(((-1.0)*x51))+(((-1.0)*x57)));
evalcond[3]=((0.0219205)+(((-1.0)*x46*x50))+x47+((x45*x49))+((x45*x48))+((x46*x51))+(((-1.0)*x54))+(((-1.0)*x55)));
evalcond[4]=((0.0219205)+(((-1.0)*x45*x51))+(((-1.0)*x47))+((x46*x49))+((x46*x48))+((x45*x50))+x54+(((-1.0)*x55)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x59=pz*pz*pz;
IkReal x60=pz*pz;
IkReal x61=pz*pz*pz*pz;
CheckValue<IkReal> x62=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((-4.0499999609521e+25)*x61))+(((-2.41313365344845e+21)*pz))+(((-2.51102171570405e+24)*x59))),-1);
if(!x62.valid){
continue;
}
CheckValue<IkReal> x63=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x60))),-1);
if(!x63.valid){
continue;
}
if( IKabs(((x62.value)*(((-9.84069162934465e+19)+(((6.975060355025e+24)*x61))+(((-5.12166671259927e+23)*sj2*x60))+(((3.10564375459977e+24)*cj2*x59))+(((-3.21687568382044e+23)*x60))+(((1.92551579857482e+23)*cj2*x60))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((-7.59684351779203e+24)*x59))+(((-2.98457532763528e+21)*cj2*pz))+(((7.93865213575951e+21)*pz*sj2))+(((-8.26068124234474e+24)*sj2*x59)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x63.value)*(((-0.121310844021634)+(((-0.14422676)*sj2))+(((-1.86034628115662)*pz))+(((126.720548854665)*x59))+(((0.05422276)*cj2))+(((3.92837102552954)*x60)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x62.value)*(((-9.84069162934465e+19)+(((6.975060355025e+24)*x61))+(((-5.12166671259927e+23)*sj2*x60))+(((3.10564375459977e+24)*cj2*x59))+(((-3.21687568382044e+23)*x60))+(((1.92551579857482e+23)*cj2*x60))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((-7.59684351779203e+24)*x59))+(((-2.98457532763528e+21)*cj2*pz))+(((7.93865213575951e+21)*pz*sj2))+(((-8.26068124234474e+24)*sj2*x59))))))+IKsqr(((x63.value)*(((-0.121310844021634)+(((-0.14422676)*sj2))+(((-1.86034628115662)*pz))+(((126.720548854665)*x59))+(((0.05422276)*cj2))+(((3.92837102552954)*x60))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x62.value)*(((-9.84069162934465e+19)+(((6.975060355025e+24)*x61))+(((-5.12166671259927e+23)*sj2*x60))+(((3.10564375459977e+24)*cj2*x59))+(((-3.21687568382044e+23)*x60))+(((1.92551579857482e+23)*cj2*x60))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((-7.59684351779203e+24)*x59))+(((-2.98457532763528e+21)*cj2*pz))+(((7.93865213575951e+21)*pz*sj2))+(((-8.26068124234474e+24)*sj2*x59))))), ((x63.value)*(((-0.121310844021634)+(((-0.14422676)*sj2))+(((-1.86034628115662)*pz))+(((126.720548854665)*x59))+(((0.05422276)*cj2))+(((3.92837102552954)*x60))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x64=IKcos(j1);
IkReal x65=IKsin(j1);
IkReal x66=((0.707106781186548)*pz);
IkReal x67=((0.14422676)*cj2);
IkReal x68=((0.05422276)*sj2);
IkReal x69=((0.14422676)*sj2);
IkReal x70=((0.05422276)*cj2);
IkReal x71=((0.0219205)*x64);
IkReal x72=((0.0219205)*x65);
IkReal x73=((0.06363961)*x64);
IkReal x74=((0.06363961)*x65);
IkReal x75=(x64*x66);
IkReal x76=(x65*x66);
IkReal x77=(x75+x72);
evalcond[0]=((0.0146806993654221)+(((0.179999999132269)*pz*x64))+(((-1.0)*(pz*pz)))+(((0.00558004828402)*x65)));
evalcond[1]=((-0.06363961)+(((-1.0)*x76))+x77+x71+x67+x68);
evalcond[2]=((0.06363961)+(((-1.0)*x76))+(((-1.0)*x77))+(((-1.0)*x70))+x71+x69);
evalcond[3]=((0.0219205)+(((-1.0)*x73))+(((-1.0)*x74))+x66+(((-1.0)*x65*x69))+((x64*x68))+((x64*x67))+((x65*x70)));
evalcond[4]=((0.0219205)+(((-1.0)*x74))+x73+(((-1.0)*x66))+((x64*x69))+(((-1.0)*x64*x70))+((x65*x68))+((x65*x67)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x78=pz*pz;
IkReal x79=pz*pz*pz;
IkReal x80=pz*pz*pz*pz;
CheckValue<IkReal> x81=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((2.41313365344845e+21)*pz))+(((2.51102171570405e+24)*x79))+(((-4.0499999609521e+25)*x80))),-1);
if(!x81.valid){
continue;
}
CheckValue<IkReal> x82=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x78))),-1);
if(!x82.valid){
continue;
}
if( IKabs(((x81.value)*(((-9.84069162934465e+19)+(((7.59684351779203e+24)*x79))+(((-3.10564375459977e+24)*sj2*x79))+(((5.12166671259927e+23)*cj2*x78))+(((1.92551579857482e+23)*sj2*x78))+(((7.93865213575951e+21)*cj2*pz))+(((-1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x78))+(((6.975060355025e+24)*x80))+(((-8.26068124234474e+24)*cj2*x79))+(((2.98457532763528e+21)*pz*sj2))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x82.value)*(((0.121310844021634)+(((-0.05422276)*sj2))+(((-0.14422676)*cj2))+(((126.720548854665)*x79))+(((-1.86034628115662)*pz))+(((-3.92837102552954)*x78)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x81.value)*(((-9.84069162934465e+19)+(((7.59684351779203e+24)*x79))+(((-3.10564375459977e+24)*sj2*x79))+(((5.12166671259927e+23)*cj2*x78))+(((1.92551579857482e+23)*sj2*x78))+(((7.93865213575951e+21)*cj2*pz))+(((-1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x78))+(((6.975060355025e+24)*x80))+(((-8.26068124234474e+24)*cj2*x79))+(((2.98457532763528e+21)*pz*sj2))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))))))+IKsqr(((x82.value)*(((0.121310844021634)+(((-0.05422276)*sj2))+(((-0.14422676)*cj2))+(((126.720548854665)*x79))+(((-1.86034628115662)*pz))+(((-3.92837102552954)*x78))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x81.value)*(((-9.84069162934465e+19)+(((7.59684351779203e+24)*x79))+(((-3.10564375459977e+24)*sj2*x79))+(((5.12166671259927e+23)*cj2*x78))+(((1.92551579857482e+23)*sj2*x78))+(((7.93865213575951e+21)*cj2*pz))+(((-1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x78))+(((6.975060355025e+24)*x80))+(((-8.26068124234474e+24)*cj2*x79))+(((2.98457532763528e+21)*pz*sj2))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))))), ((x82.value)*(((0.121310844021634)+(((-0.05422276)*sj2))+(((-0.14422676)*cj2))+(((126.720548854665)*x79))+(((-1.86034628115662)*pz))+(((-3.92837102552954)*x78))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x83=IKcos(j1);
IkReal x84=IKsin(j1);
IkReal x85=((0.707106781186548)*pz);
IkReal x86=((0.14422676)*cj2);
IkReal x87=((0.05422276)*sj2);
IkReal x88=((0.14422676)*sj2);
IkReal x89=((0.05422276)*cj2);
IkReal x90=((0.0219205)*x83);
IkReal x91=((0.0219205)*x84);
IkReal x92=((0.06363961)*x83);
IkReal x93=((0.06363961)*x84);
IkReal x94=(x83*x85);
IkReal x95=(x84*x85);
IkReal x96=(x91+x94);
evalcond[0]=((0.0146806993654221)+(((0.179999999132269)*pz*x83))+(((-1.0)*(pz*pz)))+(((0.00558004828402)*x84)));
evalcond[1]=((-0.06363961)+x86+x87+x90+x96+(((-1.0)*x95)));
evalcond[2]=((0.06363961)+x88+x90+(((-1.0)*x96))+(((-1.0)*x95))+(((-1.0)*x89)));
evalcond[3]=((0.0219205)+((x84*x89))+x85+(((-1.0)*x84*x88))+((x83*x87))+((x83*x86))+(((-1.0)*x93))+(((-1.0)*x92)));
evalcond[4]=((0.0219205)+((x84*x86))+((x84*x87))+(((-1.0)*x83*x89))+x92+((x83*x88))+(((-1.0)*x93))+(((-1.0)*x85)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.11342471163066)+(((-36.0556833278519)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((1.11342471163066)+(((-36.0556833278519)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x97=IKasin(((1.11342471163066)+(((-36.0556833278519)*(pz*pz)))));
j2array[0]=((1.14500576075206)+(((-1.0)*x97)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((4.28659841434186)+x97);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((64.5155704647748)*pz))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((67132.6257485078)*(pz*pz*pz))));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((-67132.6257485078)*(pz*pz*pz)))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((-64.5155704647748)*pz)));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x98=pz*pz;
IkReal x99=cj2*cj2;
IkReal x100=((2.65989337318868)*cj2);
IkReal x101=(cj2*x98);
j1eval[0]=((1.01284908435285)+(((-2767.79117144608)*sj2*x98))+(((-1.0)*sj2))+(((-1.0)*x100))+(((2358.23689710606)*sj2*x101))+(((2.26630490036001)*cj2*sj2))+(((2693.03396565881)*x98*x99))+(((2.58805045442982)*x99))+(((-3746.9689774666)*x98))+(((1040.56470809883)*x101)));
j1eval[1]=((-1.17366969147273)+sj2+(((-32.2577852323874)*cj2*pz))+x100+(((85.8022691733707)*pz*sj2))+(((37.8599848412898)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x102=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x103=((1.0)+(((85.8022691733707)*pz)));
IkReal x104=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x105=((x103*x103)+(x102*x102));
if((((8.07503275673303)+(((8402.59410339839)*(pz*pz))))) < -0.00001)
continue;
IkReal x106=IKabs(IKsqrt(((8.07503275673303)+(((8402.59410339839)*(pz*pz))))));
CheckValue<IkReal> x112=IKPowWithIntegerCheck(x106,-1);
if(!x112.valid){
continue;
}
IkReal x107=x112.value;
IkReal x113 = x105;
if(IKabs(x113)==0){
continue;
}
IkReal x108=pow(x113,-0.5);
IkReal x109=((1.0)*x108);
IkReal x110=(x104*x107);
if((((1.0)+(((-1.0)*(x110*x110))))) < -0.00001)
continue;
IkReal x111=IKsqrt(((1.0)+(((-1.0)*(x110*x110)))));
if((x105) < -0.00001)
continue;
CheckValue<IkReal> x114=IKPowWithIntegerCheck(IKabs(IKsqrt(x105)),-1);
if(!x114.valid){
continue;
}
if( ((x104*(x114.value))) < -1-IKFAST_SINCOS_THRESH || ((x104*(x114.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x115 = IKatan2WithCheck(IkReal(x102),IkReal(x103),IKFAST_ATAN2_MAGTHRESH);
if(!x115.valid){
continue;
}
IkReal gconst0=((((-1.0)*(IKasin((x104*(x114.value))))))+(((-1.0)*(x115.value))));
IkReal gconst1=((((-1.0)*x103*x109*x110))+(((-1.0)*x102*x109*x111)));
IkReal gconst2=(((x103*x108*x111))+(((-1.0)*x102*x109*x110)));
if((((8.07503275673303)+(((8402.59410339839)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x117=IKPowWithIntegerCheck(IKabs(IKsqrt(((8.07503275673303)+(((8402.59410339839)*(pz*pz)))))),-1);
if(!x117.valid){
continue;
}
IkReal x116=x117.value;
CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(((2.65989337318868)+(((-32.2577852323874)*pz)))),IkReal(((1.0)+(((85.8022691733707)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x118.valid){
continue;
}
CheckValue<IkReal> x119 = IKatan2WithCheck(IkReal(((2.65989337318868)+(((-32.2577852323874)*pz)))),IkReal(((1.0)+(((85.8022691733707)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x119.valid){
continue;
}
if( (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(((2.65989337318868)+(((-32.2577852323874)*pz)))),IkReal(((1.0)+(((85.8022691733707)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(((2.65989337318868)+(((-32.2577852323874)*pz)))),IkReal(((1.0)+(((85.8022691733707)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(((2.65989337318868)+(((-32.2577852323874)*pz)))),IkReal(((1.0)+(((85.8022691733707)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x122.valid){
continue;
}
if( (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(((2.65989337318868)+(((-32.2577852323874)*pz)))),IkReal(((1.0)+(((85.8022691733707)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x123.valid){
continue;
}
if( (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if(((((j2*(x118.value)))+((j2*(j2)))+(((x119.value)*(IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))))+(((IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))*(j2)))+(((x120.value)*(j2)))+(((x121.value)*(x122.value)))+(((IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))*(x123.value)))+((j2*(IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))))+(((IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))*(IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116))))))))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j2*(x118.value)))+((j2*(j2)))+(((x119.value)*(IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))))+(((IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))*(j2)))+(((x120.value)*(j2)))+(((x121.value)*(x122.value)))+(((IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))*(x123.value)))+((j2*(IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))))+(((IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116)))))*(IKasin(((((-1.17366969147273)*x116))+(((37.8599848412898)*pz*x116))))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x124=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x125=pz*pz;
IkReal x126=((1.0)+(((85.8022691733707)*pz)));
IkReal x127=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x128=x105;
IkReal x129=x106;
CheckValue<IkReal> x137=IKPowWithIntegerCheck(x129,-1);
if(!x137.valid){
continue;
}
IkReal x130=x137.value;
IkReal x138 = x128;
if(IKabs(x138)==0){
continue;
}
IkReal x131=pow(x138,-0.5);
IkReal x132=((1.0)*x127*x130);
if((x128) < -0.00001)
continue;
CheckValue<IkReal> x139=IKPowWithIntegerCheck(IKabs(IKsqrt(x128)),-1);
if(!x139.valid){
continue;
}
IkReal x133=x139.value;
IkReal x134=(x124*x131);
IkReal x135=(x126*x131);
if((((1.0)+(((-1.0)*x127*x130*x132)))) < -0.00001)
continue;
IkReal x136=IKsqrt(((1.0)+(((-1.0)*x127*x130*x132))));
px=0;
py=0;
pp=x125;
sj2=gconst1;
cj2=gconst2;
CheckValue<IkReal> x140 = IKatan2WithCheck(IkReal(((2.65989337232241)+(((-32.257785286517)*pz)))),IkReal(((1.0)+(((85.8022674555273)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
if( ((x133*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x133*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*(x140.value)))+(((-1.0)*(IKasin((x133*(((-1.17366968766114)+(((37.8599853815649)*pz))))))))));
if( ((x127*x133)) < -1-IKFAST_SINCOS_THRESH || ((x127*x133)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x141 = IKatan2WithCheck(IkReal(x124),IkReal(x126),IKFAST_ATAN2_MAGTHRESH);
if(!x141.valid){
continue;
}
IkReal gconst0=((((-1.0)*(IKasin((x127*x133)))))+(((-1.0)*(x141.value))));
IkReal gconst1=((((-1.0)*x134*x136))+(((-1.0)*x132*x135)));
IkReal gconst2=(((x135*x136))+(((-1.0)*x132*x134)));
IkReal x142=pz*pz;
j1eval[0]=((-1.0)+(((-1040.56470809883)*x142)));
j1eval[1]=IKsign(((-0.0009610166405)+(((-1.0)*x142))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x143=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x144=pz*pz;
IkReal x145=((1.0)+(((85.8022691733707)*pz)));
IkReal x146=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x147=x105;
IkReal x148=x106;
CheckValue<IkReal> x156=IKPowWithIntegerCheck(x148,-1);
if(!x156.valid){
continue;
}
IkReal x149=x156.value;
IkReal x157 = x147;
if(IKabs(x157)==0){
continue;
}
IkReal x150=pow(x157,-0.5);
IkReal x151=((1.0)*x146*x149);
if((x147) < -0.00001)
continue;
CheckValue<IkReal> x158=IKPowWithIntegerCheck(IKabs(IKsqrt(x147)),-1);
if(!x158.valid){
continue;
}
IkReal x152=x158.value;
IkReal x153=(x143*x150);
IkReal x154=(x145*x150);
if((((1.0)+(((-1.0)*x146*x149*x151)))) < -0.00001)
continue;
IkReal x155=IKsqrt(((1.0)+(((-1.0)*x146*x149*x151))));
px=0;
py=0;
pp=x144;
sj2=gconst1;
cj2=gconst2;
CheckValue<IkReal> x159 = IKatan2WithCheck(IkReal(((2.65989337232241)+(((-32.257785286517)*pz)))),IkReal(((1.0)+(((85.8022674555273)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x159.valid){
continue;
}
if( ((x152*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x152*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*(x159.value)))+(((-1.0)*(IKasin((x152*(((-1.17366968766114)+(((37.8599853815649)*pz))))))))));
if( ((x146*x152)) < -1-IKFAST_SINCOS_THRESH || ((x146*x152)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(x143),IkReal(x145),IKFAST_ATAN2_MAGTHRESH);
if(!x160.valid){
continue;
}
IkReal gconst0=((((-1.0)*(IKasin((x146*x152)))))+(((-1.0)*(x160.value))));
IkReal gconst1=((((-1.0)*x151*x154))+(((-1.0)*x153*x155)));
IkReal gconst2=((((-1.0)*x151*x153))+((x154*x155)));
j1eval[0]=((1.0)+(((64.5155704647748)*pz))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((67132.6257485078)*(pz*pz*pz))));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x161=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x162=pz*pz;
IkReal x163=((1.0)+(((85.8022691733707)*pz)));
IkReal x164=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x165=x105;
IkReal x166=x106;
CheckValue<IkReal> x174=IKPowWithIntegerCheck(x166,-1);
if(!x174.valid){
continue;
}
IkReal x167=x174.value;
IkReal x175 = x165;
if(IKabs(x175)==0){
continue;
}
IkReal x168=pow(x175,-0.5);
IkReal x169=((1.0)*x164*x167);
if((x165) < -0.00001)
continue;
CheckValue<IkReal> x176=IKPowWithIntegerCheck(IKabs(IKsqrt(x165)),-1);
if(!x176.valid){
continue;
}
IkReal x170=x176.value;
IkReal x171=(x161*x168);
IkReal x172=(x163*x168);
if((((1.0)+(((-1.0)*x164*x167*x169)))) < -0.00001)
continue;
IkReal x173=IKsqrt(((1.0)+(((-1.0)*x164*x167*x169))));
px=0;
py=0;
pp=x162;
sj2=gconst1;
cj2=gconst2;
if( ((x170*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x170*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x177 = IKatan2WithCheck(IkReal(((2.65989337232241)+(((-32.257785286517)*pz)))),IkReal(((1.0)+(((85.8022674555273)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x177.valid){
continue;
}
j2=((((-1.0)*(IKasin((x170*(((-1.17366968766114)+(((37.8599853815649)*pz)))))))))+(((-1.0)*(x177.value))));
CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(x161),IkReal(x163),IKFAST_ATAN2_MAGTHRESH);
if(!x178.valid){
continue;
}
if( ((x164*x170)) < -1-IKFAST_SINCOS_THRESH || ((x164*x170)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x178.value)))+(((-1.0)*(IKasin((x164*x170))))));
IkReal gconst1=((((-1.0)*x169*x172))+(((-1.0)*x171*x173)));
IkReal gconst2=(((x172*x173))+(((-1.0)*x169*x171)));
j1eval[0]=((1.0)+(((-67132.6257485078)*(pz*pz*pz)))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((-64.5155704647748)*pz)));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x179=pz*pz*pz;
IkReal x180=pz*pz;
IkReal x181=pz*pz*pz*pz;
CheckValue<IkReal> x182=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((-2.51102171570405e+24)*x179))+(((-4.0499999609521e+25)*x181))+(((-2.41313365344845e+21)*pz))),-1);
if(!x182.valid){
continue;
}
CheckValue<IkReal> x183=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x180))),-1);
if(!x183.valid){
continue;
}
if( IKabs(((x182.value)*(((-9.84069162934465e+19)+(((-3.21687568382044e+23)*x180))+(((7.93865213575951e+21)*gconst1*pz))+(((6.975060355025e+24)*x181))+(((-7.59684351779203e+24)*x179))+(((-8.26068124234474e+24)*gconst1*x179))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst2*x180))+(((-5.12166671259927e+23)*gconst1*x180))+(((3.10564375459977e+24)*gconst2*x179))+(((-2.98457532763528e+21)*gconst2*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x183.value)*(((-0.121310844021634)+(((-0.14422676)*gconst1))+(((0.05422276)*gconst2))+(((-1.86034628115662)*pz))+(((3.92837102552954)*x180))+(((126.720548854665)*x179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x182.value)*(((-9.84069162934465e+19)+(((-3.21687568382044e+23)*x180))+(((7.93865213575951e+21)*gconst1*pz))+(((6.975060355025e+24)*x181))+(((-7.59684351779203e+24)*x179))+(((-8.26068124234474e+24)*gconst1*x179))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst2*x180))+(((-5.12166671259927e+23)*gconst1*x180))+(((3.10564375459977e+24)*gconst2*x179))+(((-2.98457532763528e+21)*gconst2*pz))))))+IKsqr(((x183.value)*(((-0.121310844021634)+(((-0.14422676)*gconst1))+(((0.05422276)*gconst2))+(((-1.86034628115662)*pz))+(((3.92837102552954)*x180))+(((126.720548854665)*x179))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x182.value)*(((-9.84069162934465e+19)+(((-3.21687568382044e+23)*x180))+(((7.93865213575951e+21)*gconst1*pz))+(((6.975060355025e+24)*x181))+(((-7.59684351779203e+24)*x179))+(((-8.26068124234474e+24)*gconst1*x179))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst2*x180))+(((-5.12166671259927e+23)*gconst1*x180))+(((3.10564375459977e+24)*gconst2*x179))+(((-2.98457532763528e+21)*gconst2*pz))))), ((x183.value)*(((-0.121310844021634)+(((-0.14422676)*gconst1))+(((0.05422276)*gconst2))+(((-1.86034628115662)*pz))+(((3.92837102552954)*x180))+(((126.720548854665)*x179))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x184=IKcos(j1);
IkReal x185=IKsin(j1);
IkReal x186=((0.707106781186548)*pz);
IkReal x187=((0.14422676)*gconst1);
IkReal x188=((0.14422676)*gconst2);
IkReal x189=((0.0219205)*x184);
IkReal x190=((0.0219205)*x185);
IkReal x191=((0.06363961)*x184);
IkReal x192=((0.06363961)*x185);
IkReal x193=((0.14422676)*x185);
IkReal x194=((0.05422276)*x185);
IkReal x195=((0.05422276)*x184);
IkReal x196=(x184*x186);
IkReal x197=(x185*x186);
IkReal x198=(x190+x196);
evalcond[0]=((0.0146806993654221)+(((0.00558004828402)*x185))+(((0.179999999132269)*pz*x184))+(((-1.0)*(pz*pz))));
evalcond[1]=((-0.06363961)+(((0.05422276)*gconst1))+(((-1.0)*x197))+x198+x188+x189);
evalcond[2]=((0.06363961)+(((-0.05422276)*gconst2))+(((-1.0)*x198))+(((-1.0)*x197))+x187+x189);
evalcond[3]=((0.0219205)+((gconst2*x194))+(((-1.0)*x191))+(((-1.0)*x192))+x186+((x184*x188))+(((-1.0)*x185*x187))+((gconst1*x195)));
evalcond[4]=((0.0219205)+(((-1.0)*x186))+(((-1.0)*x192))+((x185*x188))+x191+((x184*x187))+((gconst1*x194))+(((-1.0)*gconst2*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x199=pz*pz;
IkReal x200=pz*pz*pz;
IkReal x201=pz*pz*pz*pz;
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((2.41313365344845e+21)*pz))+(((2.51102171570405e+24)*x200))+(((-4.0499999609521e+25)*x201))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x199))),-1);
if(!x203.valid){
continue;
}
if( IKabs(((x202.value)*(((-9.84069162934465e+19)+(((6.975060355025e+24)*x201))+(((-3.21687568382044e+23)*x199))+(((7.93865213575951e+21)*gconst2*pz))+(((5.12166671259927e+23)*gconst2*x199))+(((2.98457532763528e+21)*gconst1*pz))+(((7.59684351779203e+24)*x200))+(((-1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst1*x199))+(((-3.10564375459977e+24)*gconst1*x200))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((-8.26068124234474e+24)*gconst2*x200)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x203.value)*(((0.121310844021634)+(((-0.14422676)*gconst2))+(((-3.92837102552954)*x199))+(((-0.05422276)*gconst1))+(((-1.86034628115662)*pz))+(((126.720548854665)*x200)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x202.value)*(((-9.84069162934465e+19)+(((6.975060355025e+24)*x201))+(((-3.21687568382044e+23)*x199))+(((7.93865213575951e+21)*gconst2*pz))+(((5.12166671259927e+23)*gconst2*x199))+(((2.98457532763528e+21)*gconst1*pz))+(((7.59684351779203e+24)*x200))+(((-1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst1*x199))+(((-3.10564375459977e+24)*gconst1*x200))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((-8.26068124234474e+24)*gconst2*x200))))))+IKsqr(((x203.value)*(((0.121310844021634)+(((-0.14422676)*gconst2))+(((-3.92837102552954)*x199))+(((-0.05422276)*gconst1))+(((-1.86034628115662)*pz))+(((126.720548854665)*x200))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x202.value)*(((-9.84069162934465e+19)+(((6.975060355025e+24)*x201))+(((-3.21687568382044e+23)*x199))+(((7.93865213575951e+21)*gconst2*pz))+(((5.12166671259927e+23)*gconst2*x199))+(((2.98457532763528e+21)*gconst1*pz))+(((7.59684351779203e+24)*x200))+(((-1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst1*x199))+(((-3.10564375459977e+24)*gconst1*x200))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((-8.26068124234474e+24)*gconst2*x200))))), ((x203.value)*(((0.121310844021634)+(((-0.14422676)*gconst2))+(((-3.92837102552954)*x199))+(((-0.05422276)*gconst1))+(((-1.86034628115662)*pz))+(((126.720548854665)*x200))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x204=IKcos(j1);
IkReal x205=IKsin(j1);
IkReal x206=((0.707106781186548)*pz);
IkReal x207=((0.14422676)*gconst1);
IkReal x208=((0.14422676)*gconst2);
IkReal x209=((0.0219205)*x204);
IkReal x210=((0.0219205)*x205);
IkReal x211=((0.06363961)*x204);
IkReal x212=((0.06363961)*x205);
IkReal x213=((0.14422676)*x205);
IkReal x214=((0.05422276)*x205);
IkReal x215=((0.05422276)*x204);
IkReal x216=(x204*x206);
IkReal x217=(x205*x206);
IkReal x218=(x210+x216);
evalcond[0]=((0.0146806993654221)+(((0.00558004828402)*x205))+(((-1.0)*(pz*pz)))+(((0.179999999132269)*pz*x204)));
evalcond[1]=((-0.06363961)+(((0.05422276)*gconst1))+x218+x209+x208+(((-1.0)*x217)));
evalcond[2]=((0.06363961)+(((-0.05422276)*gconst2))+x207+x209+(((-1.0)*x218))+(((-1.0)*x217)));
evalcond[3]=((0.0219205)+x206+((x204*x208))+(((-1.0)*x205*x207))+((gconst1*x215))+(((-1.0)*x212))+(((-1.0)*x211))+((gconst2*x214)));
evalcond[4]=((0.0219205)+((x205*x208))+(((-1.0)*gconst2*x215))+(((-1.0)*x206))+x211+((x204*x207))+((gconst1*x214))+(((-1.0)*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x219=(gconst2*pz);
IkReal x220=(gconst1*pz);
CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(((-0.00279002414201)+(((-0.140325001315215)*x220))+(((-0.063642438733914)*x219))+(((-0.001972932682)*gconst1))+(((0.00435011270316)*gconst2)))),IkReal(((((0.001972932682)*gconst2))+(((0.00435011270316)*gconst1))+(((-0.0899999995661344)*pz))+(((-0.063642438733914)*x220))+(((0.140325001315215)*x219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
CheckValue<IkReal> x222=IKPowWithIntegerCheck(IKsign(((-0.0009610166405)+(((-1.0)*(pz*pz))))),-1);
if(!x222.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x221.value)+(((1.5707963267949)*(x222.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x223=IKcos(j1);
IkReal x224=IKsin(j1);
IkReal x225=((0.707106781186548)*pz);
IkReal x226=((0.14422676)*gconst1);
IkReal x227=((0.14422676)*gconst2);
IkReal x228=((0.0219205)*x223);
IkReal x229=((0.0219205)*x224);
IkReal x230=((0.06363961)*x223);
IkReal x231=((0.06363961)*x224);
IkReal x232=((0.14422676)*x224);
IkReal x233=((0.05422276)*x224);
IkReal x234=((0.05422276)*x223);
IkReal x235=(x223*x225);
IkReal x236=(x224*x225);
IkReal x237=(x229+x235);
evalcond[0]=((0.0146806993654221)+(((0.179999999132269)*pz*x223))+(((0.00558004828402)*x224))+(((-1.0)*(pz*pz))));
evalcond[1]=((-0.06363961)+(((0.05422276)*gconst1))+(((-1.0)*x236))+x228+x227+x237);
evalcond[2]=((0.06363961)+(((-0.05422276)*gconst2))+(((-1.0)*x237))+(((-1.0)*x236))+x228+x226);
evalcond[3]=((0.0219205)+(((-1.0)*x224*x226))+((gconst1*x234))+((x223*x227))+(((-1.0)*x230))+(((-1.0)*x231))+x225+((gconst2*x233)));
evalcond[4]=((0.0219205)+((x224*x227))+(((-1.0)*gconst2*x234))+((gconst1*x233))+((x223*x226))+(((-1.0)*x231))+x230+(((-1.0)*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x238=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x239=((1.0)+(((85.8022691733707)*pz)));
IkReal x240=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x241=((x238*x238)+(x239*x239));
if((((8.07503275673303)+(((8402.59410339839)*(pz*pz))))) < -0.00001)
continue;
IkReal x242=IKabs(IKsqrt(((8.07503275673303)+(((8402.59410339839)*(pz*pz))))));
CheckValue<IkReal> x248=IKPowWithIntegerCheck(x242,-1);
if(!x248.valid){
continue;
}
IkReal x243=x248.value;
IkReal x249 = x241;
if(IKabs(x249)==0){
continue;
}
IkReal x244=pow(x249,-0.5);
IkReal x245=((1.0)*x244);
IkReal x246=(x240*x243);
if((((1.0)+(((-1.0)*(x246*x246))))) < -0.00001)
continue;
IkReal x247=IKsqrt(((1.0)+(((-1.0)*(x246*x246)))));
CheckValue<IkReal> x250 = IKatan2WithCheck(IkReal(x238),IkReal(x239),IKFAST_ATAN2_MAGTHRESH);
if(!x250.valid){
continue;
}
if((x241) < -0.00001)
continue;
CheckValue<IkReal> x251=IKPowWithIntegerCheck(IKabs(IKsqrt(x241)),-1);
if(!x251.valid){
continue;
}
if( ((x240*(x251.value))) < -1-IKFAST_SINCOS_THRESH || ((x240*(x251.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x250.value)))+(IKasin((x240*(x251.value)))));
IkReal gconst4=(((x238*x245*x247))+(((-1.0)*x239*x245*x246)));
IkReal gconst5=((((-1.0)*x238*x245*x246))+(((-1.0)*x239*x245*x247)));
IkReal x252=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x253=((1.0)+(((85.8022691733707)*pz)));
CheckValue<IkReal> x254 = IKatan2WithCheck(IkReal(x252),IkReal(x253),IKFAST_ATAN2_MAGTHRESH);
if(!x254.valid){
continue;
}
if((((x253*x253)+(x252*x252))) < -0.00001)
continue;
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKabs(IKsqrt(((x253*x253)+(x252*x252)))),-1);
if(!x255.valid){
continue;
}
if( (((x255.value)*(((-1.17366969147273)+(((37.8599848412898)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x255.value)*(((-1.17366969147273)+(((37.8599848412898)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x254.value)+(((-1.0)*(IKasin(((x255.value)*(((-1.17366969147273)+(((37.8599848412898)*pz)))))))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x256=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x257=pz*pz;
IkReal x258=((1.0)+(((85.8022691733707)*pz)));
IkReal x259=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x260=x241;
IkReal x261=x242;
CheckValue<IkReal> x268=IKPowWithIntegerCheck(x261,-1);
if(!x268.valid){
continue;
}
IkReal x262=x268.value;
IkReal x269 = x260;
if(IKabs(x269)==0){
continue;
}
IkReal x263=pow(x269,-0.5);
IkReal x264=((1.0)*x263);
IkReal x265=(x259*x262);
if((x260) < -0.00001)
continue;
CheckValue<IkReal> x270=IKPowWithIntegerCheck(IKabs(IKsqrt(x260)),-1);
if(!x270.valid){
continue;
}
IkReal x266=x270.value;
if((((1.0)+(((-1.0)*(x265*x265))))) < -0.00001)
continue;
IkReal x267=IKsqrt(((1.0)+(((-1.0)*(x265*x265)))));
px=0;
py=0;
pp=x257;
sj2=gconst4;
cj2=gconst5;
if( ((x266*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x266*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x271 = IKatan2WithCheck(IkReal(((2.65989337232241)+(((-32.257785286517)*pz)))),IkReal(((1.0)+(((85.8022674555273)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x271.valid){
continue;
}
j2=((3.14159265)+(IKasin((x266*(((-1.17366968766114)+(((37.8599853815649)*pz)))))))+(((-1.0)*(x271.value))));
CheckValue<IkReal> x272 = IKatan2WithCheck(IkReal(x256),IkReal(x258),IKFAST_ATAN2_MAGTHRESH);
if(!x272.valid){
continue;
}
if( ((x259*x266)) < -1-IKFAST_SINCOS_THRESH || ((x259*x266)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x272.value)))+(IKasin((x259*x266))));
IkReal gconst4=(((x256*x264*x267))+(((-1.0)*x258*x264*x265)));
IkReal gconst5=((((-1.0)*x256*x264*x265))+(((-1.0)*x258*x264*x267)));
j1eval[0]=((1.0)+(((64.5155704647748)*pz))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((67132.6257485078)*(pz*pz*pz))));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x273=((2.65989337318868)+(((-32.2577852323874)*pz)));
IkReal x274=pz*pz;
IkReal x275=((1.0)+(((85.8022691733707)*pz)));
IkReal x276=((-1.17366969147273)+(((37.8599848412898)*pz)));
IkReal x277=x241;
IkReal x278=x242;
CheckValue<IkReal> x285=IKPowWithIntegerCheck(x278,-1);
if(!x285.valid){
continue;
}
IkReal x279=x285.value;
IkReal x286 = x277;
if(IKabs(x286)==0){
continue;
}
IkReal x280=pow(x286,-0.5);
IkReal x281=((1.0)*x280);
IkReal x282=(x276*x279);
if((x277) < -0.00001)
continue;
CheckValue<IkReal> x287=IKPowWithIntegerCheck(IKabs(IKsqrt(x277)),-1);
if(!x287.valid){
continue;
}
IkReal x283=x287.value;
if((((1.0)+(((-1.0)*(x282*x282))))) < -0.00001)
continue;
IkReal x284=IKsqrt(((1.0)+(((-1.0)*(x282*x282)))));
px=0;
py=0;
pp=x274;
sj2=gconst4;
cj2=gconst5;
if( ((x283*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x283*(((-1.17366968766114)+(((37.8599853815649)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x288 = IKatan2WithCheck(IkReal(((2.65989337232241)+(((-32.257785286517)*pz)))),IkReal(((1.0)+(((85.8022674555273)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
j2=((3.14159265)+(IKasin((x283*(((-1.17366968766114)+(((37.8599853815649)*pz)))))))+(((-1.0)*(x288.value))));
if( ((x276*x283)) < -1-IKFAST_SINCOS_THRESH || ((x276*x283)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(x273),IkReal(x275),IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin((x276*x283)))+(((-1.0)*(x289.value))));
IkReal gconst4=(((x273*x281*x284))+(((-1.0)*x275*x281*x282)));
IkReal gconst5=((((-1.0)*x273*x281*x282))+(((-1.0)*x275*x281*x284)));
j1eval[0]=((1.0)+(((-67132.6257485078)*(pz*pz*pz)))+(((-1082774.9117408)*(pz*pz*pz*pz)))+(((-64.5155704647748)*pz)));
j1eval[1]=((1.0)+(((1040.56470809883)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x290=gconst4*gconst4;
IkReal x291=gconst5*gconst5;
IkReal x292=pz*pz;
IkReal x293=pz*pz*pz;
IkReal x294=(gconst4*pz);
IkReal x295=((5.16638449273877e+22)*pz);
IkReal x296=(gconst4*gconst5);
IkReal x297=(gconst5*pz);
IkReal x298=(gconst5*x293);
IkReal x299=(gconst5*x292);
IkReal x300=((3.51916782991097e+24)*x293);
IkReal x301=(gconst4*x292);
IkReal x302=(x290*x292);
IkReal x303=(x291*x292);
CheckValue<IkReal> x304=IKPowWithIntegerCheck(((3.15261502836865e+20)+(((-3.2804999367424e+23)*x292))+(((1.26690041266057e+24)*x292*x296))+(((2.28864884340001e+20)*x290))+(((-5.37223556384542e+20)*gconst4))+(((5.59015873133096e+23)*x299))+(((1.61922655357142e+21)*x291))+(((1.21751237842312e+21)*x296))+(((-1.68491000606292e+24)*x302))+(((-1.486922616454e+24)*x301))+(((-1.4289573775481e+21)*gconst5))+(((-2.38148721567325e+23)*x303))),-1);
if(!x304.valid){
continue;
}
CheckValue<IkReal> x305=IKPowWithIntegerCheck(((-0.06363961)+(((0.05422276)*gconst4))+(((-1.74910614678729)*x297))+(((2.05287287165289)*pz))+(((4.65243584884308)*x294))+(((0.14422676)*gconst5))),-1);
if(!x305.valid){
continue;
}
if( IKabs(((x304.value)*(((-8.29429981438235e+20)+((x290*x295))+(((-1.82249997364267e+24)*x293))+(((-1.69493964992939e+23)*x292))+((x291*x300))+(((-1.0)*x291*x295))+(((4.10148573436932e+22)*x302))+(((-8.03756273038909e+24)*x293*x296))+(((-3.48552024598969e+22)*x294))+(((1.41339592811238e+21)*gconst4))+(((-2.56083335629964e+23)*x301))+(((-5.68316249847226e+24)*gconst4*x293))+(((2.18190294501537e+23)*x292*x296))+(((3.75948246287797e+21)*gconst5))+(((-4.26006676421893e+21)*x291))+(((2.90181459219362e+23)*x303))+(((-3.02584798105005e+22)*pz))+(((9.13714522206716e+22)*x297))+(((-2.57751874387248e+24)*x298))+(((-6.02126790178434e+20)*x290))+(((9.62757899287411e+22)*x299))+(((-3.20318611802997e+21)*x296))+(((1.17997042075563e+23)*gconst5*x294))+(((-1.0)*x290*x300)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x305.value)*(((-0.189351664496956)+(((11.4048493419402)*x292))+(((-0.379450068572434)*gconst4))+(((-9.71725641788473)*x299))+(((0.142656120127684)*gconst5))+(((25.8468659515067)*x301))+(((-0.707106781186548)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x304.value)*(((-8.29429981438235e+20)+((x290*x295))+(((-1.82249997364267e+24)*x293))+(((-1.69493964992939e+23)*x292))+((x291*x300))+(((-1.0)*x291*x295))+(((4.10148573436932e+22)*x302))+(((-8.03756273038909e+24)*x293*x296))+(((-3.48552024598969e+22)*x294))+(((1.41339592811238e+21)*gconst4))+(((-2.56083335629964e+23)*x301))+(((-5.68316249847226e+24)*gconst4*x293))+(((2.18190294501537e+23)*x292*x296))+(((3.75948246287797e+21)*gconst5))+(((-4.26006676421893e+21)*x291))+(((2.90181459219362e+23)*x303))+(((-3.02584798105005e+22)*pz))+(((9.13714522206716e+22)*x297))+(((-2.57751874387248e+24)*x298))+(((-6.02126790178434e+20)*x290))+(((9.62757899287411e+22)*x299))+(((-3.20318611802997e+21)*x296))+(((1.17997042075563e+23)*gconst5*x294))+(((-1.0)*x290*x300))))))+IKsqr(((x305.value)*(((-0.189351664496956)+(((11.4048493419402)*x292))+(((-0.379450068572434)*gconst4))+(((-9.71725641788473)*x299))+(((0.142656120127684)*gconst5))+(((25.8468659515067)*x301))+(((-0.707106781186548)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x304.value)*(((-8.29429981438235e+20)+((x290*x295))+(((-1.82249997364267e+24)*x293))+(((-1.69493964992939e+23)*x292))+((x291*x300))+(((-1.0)*x291*x295))+(((4.10148573436932e+22)*x302))+(((-8.03756273038909e+24)*x293*x296))+(((-3.48552024598969e+22)*x294))+(((1.41339592811238e+21)*gconst4))+(((-2.56083335629964e+23)*x301))+(((-5.68316249847226e+24)*gconst4*x293))+(((2.18190294501537e+23)*x292*x296))+(((3.75948246287797e+21)*gconst5))+(((-4.26006676421893e+21)*x291))+(((2.90181459219362e+23)*x303))+(((-3.02584798105005e+22)*pz))+(((9.13714522206716e+22)*x297))+(((-2.57751874387248e+24)*x298))+(((-6.02126790178434e+20)*x290))+(((9.62757899287411e+22)*x299))+(((-3.20318611802997e+21)*x296))+(((1.17997042075563e+23)*gconst5*x294))+(((-1.0)*x290*x300))))), ((x305.value)*(((-0.189351664496956)+(((11.4048493419402)*x292))+(((-0.379450068572434)*gconst4))+(((-9.71725641788473)*x299))+(((0.142656120127684)*gconst5))+(((25.8468659515067)*x301))+(((-0.707106781186548)*pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x306=IKcos(j1);
IkReal x307=IKsin(j1);
IkReal x308=((0.707106781186548)*pz);
IkReal x309=((0.05422276)*gconst4);
IkReal x310=((0.05422276)*gconst5);
IkReal x311=((0.14422676)*gconst4);
IkReal x312=((0.0219205)*x306);
IkReal x313=((0.0219205)*x307);
IkReal x314=((0.06363961)*x306);
IkReal x315=((0.06363961)*x307);
IkReal x316=((0.14422676)*x306);
IkReal x317=(gconst5*x307);
IkReal x318=(x306*x308);
IkReal x319=(x307*x308);
IkReal x320=(x318+x313);
evalcond[0]=((0.0146806993654221)+(((0.00558004828402)*x307))+(((-1.0)*(pz*pz)))+(((0.179999999132269)*pz*x306)));
evalcond[1]=((-0.06363961)+x309+x320+x312+(((-1.0)*x319))+(((0.14422676)*gconst5)));
evalcond[2]=((0.06363961)+(((-1.0)*x320))+x311+x312+(((-1.0)*x319))+(((-1.0)*x310)));
evalcond[3]=((0.0219205)+x308+((x307*x310))+(((-1.0)*x315))+(((-1.0)*x314))+(((-1.0)*x307*x311))+((gconst5*x316))+((x306*x309)));
evalcond[4]=((0.0219205)+x314+(((0.14422676)*x317))+(((-1.0)*x306*x310))+(((-1.0)*x315))+((x306*x311))+((x307*x309))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x321=pz*pz*pz;
IkReal x322=pz*pz;
IkReal x323=pz*pz*pz*pz;
CheckValue<IkReal> x324=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((-4.0499999609521e+25)*x323))+(((-2.51102171570405e+24)*x321))+(((-2.41313365344845e+21)*pz))),-1);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x322))),-1);
if(!x325.valid){
continue;
}
if( IKabs(((x324.value)*(((-9.84069162934465e+19)+(((3.10564375459977e+24)*gconst5*x321))+(((-2.98457532763528e+21)*gconst5*pz))+(((-8.26068124234474e+24)*gconst4*x321))+(((1.92551579857482e+23)*gconst5*x322))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((6.975060355025e+24)*x323))+(((-5.12166671259927e+23)*gconst4*x322))+(((-3.21687568382044e+23)*x322))+(((7.93865213575951e+21)*gconst4*pz))+(((-7.59684351779203e+24)*x321)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x325.value)*(((-0.121310844021634)+(((-0.14422676)*gconst4))+(((0.05422276)*gconst5))+(((-1.86034628115662)*pz))+(((3.92837102552954)*x322))+(((126.720548854665)*x321)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x324.value)*(((-9.84069162934465e+19)+(((3.10564375459977e+24)*gconst5*x321))+(((-2.98457532763528e+21)*gconst5*pz))+(((-8.26068124234474e+24)*gconst4*x321))+(((1.92551579857482e+23)*gconst5*x322))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((6.975060355025e+24)*x323))+(((-5.12166671259927e+23)*gconst4*x322))+(((-3.21687568382044e+23)*x322))+(((7.93865213575951e+21)*gconst4*pz))+(((-7.59684351779203e+24)*x321))))))+IKsqr(((x325.value)*(((-0.121310844021634)+(((-0.14422676)*gconst4))+(((0.05422276)*gconst5))+(((-1.86034628115662)*pz))+(((3.92837102552954)*x322))+(((126.720548854665)*x321))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x324.value)*(((-9.84069162934465e+19)+(((3.10564375459977e+24)*gconst5*x321))+(((-2.98457532763528e+21)*gconst5*pz))+(((-8.26068124234474e+24)*gconst4*x321))+(((1.92551579857482e+23)*gconst5*x322))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((6.975060355025e+24)*x323))+(((-5.12166671259927e+23)*gconst4*x322))+(((-3.21687568382044e+23)*x322))+(((7.93865213575951e+21)*gconst4*pz))+(((-7.59684351779203e+24)*x321))))), ((x325.value)*(((-0.121310844021634)+(((-0.14422676)*gconst4))+(((0.05422276)*gconst5))+(((-1.86034628115662)*pz))+(((3.92837102552954)*x322))+(((126.720548854665)*x321))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x326=IKcos(j1);
IkReal x327=IKsin(j1);
IkReal x328=((0.707106781186548)*pz);
IkReal x329=((0.05422276)*gconst4);
IkReal x330=((0.05422276)*gconst5);
IkReal x331=((0.14422676)*gconst4);
IkReal x332=((0.0219205)*x326);
IkReal x333=((0.0219205)*x327);
IkReal x334=((0.06363961)*x326);
IkReal x335=((0.06363961)*x327);
IkReal x336=((0.14422676)*x326);
IkReal x337=(gconst5*x327);
IkReal x338=(x326*x328);
IkReal x339=(x327*x328);
IkReal x340=(x338+x333);
evalcond[0]=((0.0146806993654221)+(((0.00558004828402)*x327))+(((-1.0)*(pz*pz)))+(((0.179999999132269)*pz*x326)));
evalcond[1]=((-0.06363961)+x332+x329+x340+(((-1.0)*x339))+(((0.14422676)*gconst5)));
evalcond[2]=((0.06363961)+x332+x331+(((-1.0)*x339))+(((-1.0)*x330))+(((-1.0)*x340)));
evalcond[3]=((0.0219205)+((x326*x329))+((gconst5*x336))+x328+((x327*x330))+(((-1.0)*x334))+(((-1.0)*x335))+(((-1.0)*x327*x331)));
evalcond[4]=((0.0219205)+((x327*x329))+(((0.14422676)*x337))+(((-1.0)*x328))+x334+(((-1.0)*x335))+((x326*x331))+(((-1.0)*x326*x330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x341=pz*pz;
IkReal x342=pz*pz*pz;
IkReal x343=pz*pz*pz*pz;
CheckValue<IkReal> x344=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((-4.0499999609521e+25)*x343))+(((2.41313365344845e+21)*pz))+(((2.51102171570405e+24)*x342))),-1);
if(!x344.valid){
continue;
}
CheckValue<IkReal> x345=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x341))),-1);
if(!x345.valid){
continue;
}
if( IKabs(((x344.value)*(((-9.84069162934465e+19)+(((5.12166671259927e+23)*gconst5*x341))+(((2.98457532763528e+21)*gconst4*pz))+(((6.975060355025e+24)*x343))+(((-1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst4*x341))+(((-3.21687568382044e+23)*x341))+(((7.59684351779203e+24)*x342))+(((-3.10564375459977e+24)*gconst4*x342))+(((7.93865213575951e+21)*gconst5*pz))+(((-8.26068124234474e+24)*gconst5*x342))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x345.value)*(((0.121310844021634)+(((-0.14422676)*gconst5))+(((-0.05422276)*gconst4))+(((126.720548854665)*x342))+(((-1.86034628115662)*pz))+(((-3.92837102552954)*x341)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x344.value)*(((-9.84069162934465e+19)+(((5.12166671259927e+23)*gconst5*x341))+(((2.98457532763528e+21)*gconst4*pz))+(((6.975060355025e+24)*x343))+(((-1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst4*x341))+(((-3.21687568382044e+23)*x341))+(((7.59684351779203e+24)*x342))+(((-3.10564375459977e+24)*gconst4*x342))+(((7.93865213575951e+21)*gconst5*pz))+(((-8.26068124234474e+24)*gconst5*x342))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))))))+IKsqr(((x345.value)*(((0.121310844021634)+(((-0.14422676)*gconst5))+(((-0.05422276)*gconst4))+(((126.720548854665)*x342))+(((-1.86034628115662)*pz))+(((-3.92837102552954)*x341))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x344.value)*(((-9.84069162934465e+19)+(((5.12166671259927e+23)*gconst5*x341))+(((2.98457532763528e+21)*gconst4*pz))+(((6.975060355025e+24)*x343))+(((-1.30260731174894e+22)*pz))+(((1.92551579857482e+23)*gconst4*x341))+(((-3.21687568382044e+23)*x341))+(((7.59684351779203e+24)*x342))+(((-3.10564375459977e+24)*gconst4*x342))+(((7.93865213575951e+21)*gconst5*pz))+(((-8.26068124234474e+24)*gconst5*x342))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))))), ((x345.value)*(((0.121310844021634)+(((-0.14422676)*gconst5))+(((-0.05422276)*gconst4))+(((126.720548854665)*x342))+(((-1.86034628115662)*pz))+(((-3.92837102552954)*x341))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x346=IKcos(j1);
IkReal x347=IKsin(j1);
IkReal x348=((0.707106781186548)*pz);
IkReal x349=((0.05422276)*gconst4);
IkReal x350=((0.05422276)*gconst5);
IkReal x351=((0.14422676)*gconst4);
IkReal x352=((0.0219205)*x346);
IkReal x353=((0.0219205)*x347);
IkReal x354=((0.06363961)*x346);
IkReal x355=((0.06363961)*x347);
IkReal x356=((0.14422676)*x346);
IkReal x357=(gconst5*x347);
IkReal x358=(x346*x348);
IkReal x359=(x347*x348);
IkReal x360=(x353+x358);
evalcond[0]=((0.0146806993654221)+(((0.179999999132269)*pz*x346))+(((0.00558004828402)*x347))+(((-1.0)*(pz*pz))));
evalcond[1]=((-0.06363961)+(((-1.0)*x359))+x352+x349+x360+(((0.14422676)*gconst5)));
evalcond[2]=((0.06363961)+(((-1.0)*x360))+(((-1.0)*x350))+(((-1.0)*x359))+x351+x352);
evalcond[3]=((0.0219205)+(((-1.0)*x354))+(((-1.0)*x355))+x348+((x347*x350))+((gconst5*x356))+(((-1.0)*x347*x351))+((x346*x349)));
evalcond[4]=((0.0219205)+(((0.14422676)*x357))+(((-1.0)*x355))+((x346*x351))+(((-1.0)*x346*x350))+x354+((x347*x349))+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x361=cj2*cj2;
IkReal x362=pz*pz;
IkReal x363=pz*pz*pz;
IkReal x364=(cj2*pz);
IkReal x365=(cj2*sj2);
IkReal x366=(pz*sj2);
IkReal x367=(sj2*x362);
IkReal x368=(cj2*x363);
IkReal x369=(cj2*x362);
IkReal x370=(x361*x362);
CheckValue<IkReal> x371=IKPowWithIntegerCheck(((5.44126387176865e+20)+(((1.44676128449559e+24)*x370))+(((1.21751237842312e+21)*x365))+(((1.26690041266057e+24)*x362*x365))+(((-1.4289573775481e+21)*cj2))+(((5.59015873133096e+23)*x369))+(((-1.486922616454e+24)*x367))+(((-5.37223556384542e+20)*sj2))+(((-2.01295999973716e+24)*x362))+(((1.39036166923142e+21)*x361))),-1);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(((-0.06363961)+(((-1.74910614678729)*x364))+(((0.05422276)*sj2))+(((0.14422676)*cj2))+(((2.05287287165289)*pz))+(((4.65243584884308)*x366))),-1);
if(!x372.valid){
continue;
}
if( IKabs(((x371.value)*(((-1.43155677161667e+21)+(((9.62757899287411e+22)*x369))+(((2.14053651168872e+22)*pz))+(((-3.48552024598969e+22)*x366))+(((1.41339592811238e+21)*sj2))+(((2.49166601875669e+23)*x370))+(((-8.03756273038909e+24)*x363*x365))+(((-1.28479107649246e+23)*x362))+(((9.13714522206716e+22)*x364))+(((7.03833565982194e+24)*x361*x363))+(((-2.57751874387248e+24)*x368))+(((-3.20318611802997e+21)*x365))+(((-1.03327689854775e+23)*pz*x361))+(((-5.34166780355363e+24)*x363))+(((2.18190294501537e+23)*x362*x365))+(((3.75948246287797e+21)*cj2))+(((-5.68316249847226e+24)*sj2*x363))+(((1.17997042075563e+23)*sj2*x364))+(((-3.6579399740405e+21)*x361))+(((-2.56083335629964e+23)*x367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x372.value)*(((-0.189351664496956)+(((0.142656120127684)*cj2))+(((25.8468659515067)*x367))+(((-0.379450068572434)*sj2))+(((11.4048493419402)*x362))+(((-9.71725641788473)*x369))+(((-0.707106781186548)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x371.value)*(((-1.43155677161667e+21)+(((9.62757899287411e+22)*x369))+(((2.14053651168872e+22)*pz))+(((-3.48552024598969e+22)*x366))+(((1.41339592811238e+21)*sj2))+(((2.49166601875669e+23)*x370))+(((-8.03756273038909e+24)*x363*x365))+(((-1.28479107649246e+23)*x362))+(((9.13714522206716e+22)*x364))+(((7.03833565982194e+24)*x361*x363))+(((-2.57751874387248e+24)*x368))+(((-3.20318611802997e+21)*x365))+(((-1.03327689854775e+23)*pz*x361))+(((-5.34166780355363e+24)*x363))+(((2.18190294501537e+23)*x362*x365))+(((3.75948246287797e+21)*cj2))+(((-5.68316249847226e+24)*sj2*x363))+(((1.17997042075563e+23)*sj2*x364))+(((-3.6579399740405e+21)*x361))+(((-2.56083335629964e+23)*x367))))))+IKsqr(((x372.value)*(((-0.189351664496956)+(((0.142656120127684)*cj2))+(((25.8468659515067)*x367))+(((-0.379450068572434)*sj2))+(((11.4048493419402)*x362))+(((-9.71725641788473)*x369))+(((-0.707106781186548)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x371.value)*(((-1.43155677161667e+21)+(((9.62757899287411e+22)*x369))+(((2.14053651168872e+22)*pz))+(((-3.48552024598969e+22)*x366))+(((1.41339592811238e+21)*sj2))+(((2.49166601875669e+23)*x370))+(((-8.03756273038909e+24)*x363*x365))+(((-1.28479107649246e+23)*x362))+(((9.13714522206716e+22)*x364))+(((7.03833565982194e+24)*x361*x363))+(((-2.57751874387248e+24)*x368))+(((-3.20318611802997e+21)*x365))+(((-1.03327689854775e+23)*pz*x361))+(((-5.34166780355363e+24)*x363))+(((2.18190294501537e+23)*x362*x365))+(((3.75948246287797e+21)*cj2))+(((-5.68316249847226e+24)*sj2*x363))+(((1.17997042075563e+23)*sj2*x364))+(((-3.6579399740405e+21)*x361))+(((-2.56083335629964e+23)*x367))))), ((x372.value)*(((-0.189351664496956)+(((0.142656120127684)*cj2))+(((25.8468659515067)*x367))+(((-0.379450068572434)*sj2))+(((11.4048493419402)*x362))+(((-9.71725641788473)*x369))+(((-0.707106781186548)*pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x373=IKcos(j1);
IkReal x374=IKsin(j1);
IkReal x375=((0.707106781186548)*pz);
IkReal x376=((0.14422676)*cj2);
IkReal x377=((0.05422276)*sj2);
IkReal x378=((0.14422676)*sj2);
IkReal x379=((0.05422276)*cj2);
IkReal x380=((0.0219205)*x373);
IkReal x381=((0.0219205)*x374);
IkReal x382=((0.06363961)*x373);
IkReal x383=((0.06363961)*x374);
IkReal x384=(x373*x375);
IkReal x385=(x374*x375);
IkReal x386=(x384+x381);
evalcond[0]=((0.0146806993654221)+(((0.179999999132269)*pz*x373))+(((0.00558004828402)*x374))+(((-1.0)*(pz*pz))));
evalcond[1]=((-0.06363961)+x386+x380+x377+x376+(((-1.0)*x385)));
evalcond[2]=((0.06363961)+(((-1.0)*x379))+x380+x378+(((-1.0)*x385))+(((-1.0)*x386)));
evalcond[3]=((0.0219205)+x375+(((-1.0)*x374*x378))+(((-1.0)*x383))+(((-1.0)*x382))+((x374*x379))+((x373*x376))+((x373*x377)));
evalcond[4]=((0.0219205)+(((-1.0)*x375))+x382+(((-1.0)*x373*x379))+(((-1.0)*x383))+((x374*x377))+((x374*x376))+((x373*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x387=pz*pz*pz;
IkReal x388=pz*pz;
IkReal x389=pz*pz*pz*pz;
CheckValue<IkReal> x390=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((-2.51102171570405e+24)*x387))+(((-4.0499999609521e+25)*x389))+(((-2.41313365344845e+21)*pz))),-1);
if(!x390.valid){
continue;
}
CheckValue<IkReal> x391=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x388))),-1);
if(!x391.valid){
continue;
}
if( IKabs(((x390.value)*(((-9.84069162934465e+19)+(((3.10564375459977e+24)*cj2*x387))+(((-7.59684351779203e+24)*x387))+(((-8.26068124234474e+24)*sj2*x387))+(((6.975060355025e+24)*x389))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x388))+(((-2.98457532763528e+21)*cj2*pz))+(((-5.12166671259927e+23)*sj2*x388))+(((7.93865213575951e+21)*pz*sj2))+(((1.92551579857482e+23)*cj2*x388)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x391.value)*(((-0.121310844021634)+(((-0.14422676)*sj2))+(((3.92837102552954)*x388))+(((-1.86034628115662)*pz))+(((126.720548854665)*x387))+(((0.05422276)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x390.value)*(((-9.84069162934465e+19)+(((3.10564375459977e+24)*cj2*x387))+(((-7.59684351779203e+24)*x387))+(((-8.26068124234474e+24)*sj2*x387))+(((6.975060355025e+24)*x389))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x388))+(((-2.98457532763528e+21)*cj2*pz))+(((-5.12166671259927e+23)*sj2*x388))+(((7.93865213575951e+21)*pz*sj2))+(((1.92551579857482e+23)*cj2*x388))))))+IKsqr(((x391.value)*(((-0.121310844021634)+(((-0.14422676)*sj2))+(((3.92837102552954)*x388))+(((-1.86034628115662)*pz))+(((126.720548854665)*x387))+(((0.05422276)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x390.value)*(((-9.84069162934465e+19)+(((3.10564375459977e+24)*cj2*x387))+(((-7.59684351779203e+24)*x387))+(((-8.26068124234474e+24)*sj2*x387))+(((6.975060355025e+24)*x389))+(((2.24999998915336e+26)*(pz*pz*pz*pz*pz)))+(((1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x388))+(((-2.98457532763528e+21)*cj2*pz))+(((-5.12166671259927e+23)*sj2*x388))+(((7.93865213575951e+21)*pz*sj2))+(((1.92551579857482e+23)*cj2*x388))))), ((x391.value)*(((-0.121310844021634)+(((-0.14422676)*sj2))+(((3.92837102552954)*x388))+(((-1.86034628115662)*pz))+(((126.720548854665)*x387))+(((0.05422276)*cj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x392=IKcos(j1);
IkReal x393=IKsin(j1);
IkReal x394=((0.707106781186548)*pz);
IkReal x395=((0.14422676)*cj2);
IkReal x396=((0.05422276)*sj2);
IkReal x397=((0.14422676)*sj2);
IkReal x398=((0.05422276)*cj2);
IkReal x399=((0.0219205)*x392);
IkReal x400=((0.0219205)*x393);
IkReal x401=((0.06363961)*x392);
IkReal x402=((0.06363961)*x393);
IkReal x403=(x392*x394);
IkReal x404=(x393*x394);
IkReal x405=(x400+x403);
evalcond[0]=((0.0146806993654221)+(((0.00558004828402)*x393))+(((0.179999999132269)*pz*x392))+(((-1.0)*(pz*pz))));
evalcond[1]=((-0.06363961)+x395+x396+x399+x405+(((-1.0)*x404)));
evalcond[2]=((0.06363961)+(((-1.0)*x398))+x397+x399+(((-1.0)*x404))+(((-1.0)*x405)));
evalcond[3]=((0.0219205)+x394+(((-1.0)*x393*x397))+(((-1.0)*x402))+(((-1.0)*x401))+((x393*x398))+((x392*x396))+((x392*x395)));
evalcond[4]=((0.0219205)+(((-1.0)*x394))+x401+(((-1.0)*x402))+(((-1.0)*x392*x398))+((x393*x396))+((x393*x395))+((x392*x397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x406=pz*pz;
IkReal x407=pz*pz*pz;
IkReal x408=pz*pz*pz*pz;
CheckValue<IkReal> x409=IKPowWithIntegerCheck(((3.74038954637472e+19)+(((2.41313365344845e+21)*pz))+(((-4.0499999609521e+25)*x408))+(((2.51102171570405e+24)*x407))),-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410=IKPowWithIntegerCheck(((0.0219205)+(((22.8096986838804)*x406))),-1);
if(!x410.valid){
continue;
}
if( IKabs(((x409.value)*(((-9.84069162934465e+19)+(((-3.10564375459977e+24)*sj2*x407))+(((-8.26068124234474e+24)*cj2*x407))+(((7.59684351779203e+24)*x407))+(((5.12166671259927e+23)*cj2*x406))+(((1.92551579857482e+23)*sj2*x406))+(((6.975060355025e+24)*x408))+(((7.93865213575951e+21)*cj2*pz))+(((-1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x406))+(((2.98457532763528e+21)*pz*sj2))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x410.value)*(((0.121310844021634)+(((-3.92837102552954)*x406))+(((-0.05422276)*sj2))+(((-0.14422676)*cj2))+(((-1.86034628115662)*pz))+(((126.720548854665)*x407)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x409.value)*(((-9.84069162934465e+19)+(((-3.10564375459977e+24)*sj2*x407))+(((-8.26068124234474e+24)*cj2*x407))+(((7.59684351779203e+24)*x407))+(((5.12166671259927e+23)*cj2*x406))+(((1.92551579857482e+23)*sj2*x406))+(((6.975060355025e+24)*x408))+(((7.93865213575951e+21)*cj2*pz))+(((-1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x406))+(((2.98457532763528e+21)*pz*sj2))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))))))+IKsqr(((x410.value)*(((0.121310844021634)+(((-3.92837102552954)*x406))+(((-0.05422276)*sj2))+(((-0.14422676)*cj2))+(((-1.86034628115662)*pz))+(((126.720548854665)*x407))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x409.value)*(((-9.84069162934465e+19)+(((-3.10564375459977e+24)*sj2*x407))+(((-8.26068124234474e+24)*cj2*x407))+(((7.59684351779203e+24)*x407))+(((5.12166671259927e+23)*cj2*x406))+(((1.92551579857482e+23)*sj2*x406))+(((6.975060355025e+24)*x408))+(((7.93865213575951e+21)*cj2*pz))+(((-1.30260731174894e+22)*pz))+(((-3.21687568382044e+23)*x406))+(((2.98457532763528e+21)*pz*sj2))+(((-2.24999998915336e+26)*(pz*pz*pz*pz*pz)))))), ((x410.value)*(((0.121310844021634)+(((-3.92837102552954)*x406))+(((-0.05422276)*sj2))+(((-0.14422676)*cj2))+(((-1.86034628115662)*pz))+(((126.720548854665)*x407))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x411=IKcos(j1);
IkReal x412=IKsin(j1);
IkReal x413=((0.707106781186548)*pz);
IkReal x414=((0.14422676)*cj2);
IkReal x415=((0.05422276)*sj2);
IkReal x416=((0.14422676)*sj2);
IkReal x417=((0.05422276)*cj2);
IkReal x418=((0.0219205)*x411);
IkReal x419=((0.0219205)*x412);
IkReal x420=((0.06363961)*x411);
IkReal x421=((0.06363961)*x412);
IkReal x422=(x411*x413);
IkReal x423=(x412*x413);
IkReal x424=(x419+x422);
evalcond[0]=((0.0146806993654221)+(((0.00558004828402)*x412))+(((-1.0)*(pz*pz)))+(((0.179999999132269)*pz*x411)));
evalcond[1]=((-0.06363961)+(((-1.0)*x423))+x414+x415+x418+x424);
evalcond[2]=((0.06363961)+(((-1.0)*x423))+(((-1.0)*x424))+x416+x418+(((-1.0)*x417)));
evalcond[3]=((0.0219205)+(((-1.0)*x412*x416))+((x411*x414))+((x411*x415))+(((-1.0)*x420))+(((-1.0)*x421))+x413+((x412*x417)));
evalcond[4]=((0.0219205)+((x411*x416))+(((-1.0)*x421))+x420+(((-1.0)*x411*x417))+((x412*x415))+((x412*x414))+(((-1.0)*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x425=((0.707106781186548)*py);
IkReal x426=((0.707106781186548)*px);
IkReal x427=((((-1.0)*x426))+x425);
IkReal x428=((((-1.0)*x425))+(((-1.0)*x426)));
CheckValue<IkReal> x431 = IKatan2WithCheck(IkReal(x427),IkReal(x428),IKFAST_ATAN2_MAGTHRESH);
if(!x431.valid){
continue;
}
IkReal x429=((1.0)*(x431.value));
if((((x427*x427)+(x428*x428))) < -0.00001)
continue;
CheckValue<IkReal> x432=IKPowWithIntegerCheck(IKabs(IKsqrt(((x427*x427)+(x428*x428)))),-1);
if(!x432.valid){
continue;
}
if( (((0.000499925705540725)*(x432.value))) < -1-IKFAST_SINCOS_THRESH || (((0.000499925705540725)*(x432.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x430=IKasin(((0.000499925705540725)*(x432.value)));
j0array[0]=((((-1.0)*x429))+(((1.0)*x430)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x430))+(((-1.0)*x429)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x433=((1.58071721277635)*cj0);
IkReal x434=((1.58071721277635)*sj0);
if( (((-1.11342471163066)+((px*x434))+(((36.0556833278519)*(pz*pz)))+(((36.0556833278519)*(px*px)))+(((-1.0)*py*x433))+(((-1.0)*py*x434))+(((36.0556833278519)*(py*py)))+(((-1.0)*px*x433)))) < -1-IKFAST_SINCOS_THRESH || (((-1.11342471163066)+((px*x434))+(((36.0556833278519)*(pz*pz)))+(((36.0556833278519)*(px*px)))+(((-1.0)*py*x433))+(((-1.0)*py*x434))+(((36.0556833278519)*(py*py)))+(((-1.0)*px*x433)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x435=((-1.0)*(IKasin(((-1.11342471163066)+((px*x434))+(((36.0556833278519)*(pz*pz)))+(((36.0556833278519)*(px*px)))+(((-1.0)*py*x433))+(((-1.0)*py*x434))+(((36.0556833278519)*(py*py)))+(((-1.0)*px*x433))))));
j2array[0]=((1.14500576075206)+(((-1.0)*x435)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((4.28659841434186)+x435);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
j1eval[0]=((2.77954517902102)+sj2+(((-2.20489667125906)*cj2)));
j1eval[1]=IKsign(((0.0318414659240194)+(((-0.0252585001149744)*cj2))+(((0.01145563891688)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x436=(cj2*pz);
IkReal x437=(pz*sj2);
IkReal x438=(cj0*px);
IkReal x439=((22.8096986838804)*cj2);
IkReal x440=(py*sj0);
IkReal x441=((0.045002)*cj2);
IkReal x442=((0.09922476)*sj2);
IkReal x443=(px*sj0);
IkReal x444=(cj0*py);
IkReal x445=((50.2930287005099)*sj2);
IkReal x446=(py*x445);
j1eval[0]=(((x439*x443))+(((2.20489667125906)*sj2))+(((-1.0)*x444*x445))+(((-1.0)*x438*x445))+cj2+(((-1.0)*x438*x439))+(((45.6173697091883)*pz))+(((-1.0)*x439*x444))+(((-1.0)*x439*x440))+(((32.2577852323874)*x437))+((x443*x445))+(((-1.0)*x440*x445))+(((-71.1250832810804)*x436)));
j1eval[1]=IKsign(((((0.00435011270316)*sj2))+(((-1.0)*x438*x441))+(((-1.0)*x438*x442))+(((0.001972932682)*cj2))+((x441*x443))+(((-0.140325001315215)*x436))+((x442*x443))+(((-1.0)*x440*x441))+(((-1.0)*x440*x442))+(((0.0899999995661344)*pz))+(((0.063642438733914)*x437))+(((-1.0)*x441*x444))+(((-1.0)*x442*x444))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x447=(px*sj0);
IkReal x448=((0.09922476)*cj2);
IkReal x449=((0.06363961)*py);
IkReal x450=(cj2*pz);
IkReal x451=(pz*sj2);
IkReal x452=((22.8096986838804)*sj2);
IkReal x453=(py*sj0);
IkReal x454=((50.2930287005099)*cj2);
IkReal x455=((32.2563514612609)*cj0);
IkReal x456=(cj0*px);
IkReal x457=((0.045002)*sj2);
IkReal x458=(cj0*py);
IkReal x459=(cj0*x454);
j1eval[0]=((1.41415070441314)+((x454*x458))+((x454*x456))+(((32.2563514612609)*x447))+sj2+(((-2.20489667125906)*cj2))+((x453*x454))+(((-32.2577852323874)*x450))+((x447*x452))+(((-1.0)*x447*x454))+(((-71.1250832810804)*x451))+(((-1.0)*py*x455))+(((-1.0)*x452*x456))+(((-1.0)*x452*x453))+(((-1.0)*x452*x458))+(((-1.0)*px*x455))+(((-32.2563514612609)*x453)));
j1eval[1]=IKsign(((0.00279002414201)+(((-0.06363961)*x456))+(((-1.0)*x456*x457))+(((-1.0)*sj0*x449))+((x447*x457))+(((0.001972932682)*sj2))+(((-1.0)*x447*x448))+(((-1.0)*x453*x457))+((x448*x453))+((x448*x456))+((x448*x458))+(((-0.140325001315215)*x451))+(((-0.063642438733914)*x450))+(((-1.0)*x457*x458))+(((0.06363961)*x447))+(((-1.0)*cj0*x449))+(((-0.00435011270316)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x460=py*py;
IkReal x461=px*px;
IkReal x462=cj2*cj2;
IkReal x463=(cj2*sj2);
IkReal x464=(px*sj0);
IkReal x465=((0.09922476)*cj2);
IkReal x466=(py*sj0);
IkReal x467=((0.707106781186548)*pz);
IkReal x468=(px*py);
IkReal x469=(cj0*py);
IkReal x470=(cj0*px);
IkReal x471=((0.045002)*sj2);
IkReal x472=((0.5)*(pz*pz));
IkReal x473=((0.25)*x461);
IkReal x474=((0.0219205)*x464);
IkReal x475=((0.25)*x460);
IkReal x476=((0.0219205)*x469);
IkReal x477=((0.0219205)*x470);
IkReal x478=((0.5)*x468);
IkReal x479=((0.0219205)*x466);
IkReal x480=((0.5)*cj0*sj0);
IkReal x481=(x468*(cj0*cj0));
IkReal x482=(x460*x480);
IkReal x483=(x461*x480);
IkReal x484=(x483+x476+x477+x478+x479);
IkReal x485=(x481+x482+x474+x475+x473);
CheckValue<IkReal> x486=IKPowWithIntegerCheck(IKsign(((0.00279002414201)+(((-0.063642438733914)*cj2*pz))+(((-0.06363961)*x469))+(((-0.06363961)*x466))+(((-0.140325001315215)*pz*sj2))+((x465*x466))+((x465*x469))+(((-1.0)*x469*x471))+((x465*x470))+(((-1.0)*x464*x465))+(((0.06363961)*x464))+(((0.001972932682)*sj2))+((x464*x471))+(((-1.0)*x470*x471))+(((-1.0)*x466*x471))+(((-0.06363961)*x470))+(((-0.00435011270316)*cj2)))),-1);
if(!x486.valid){
continue;
}
CheckValue<IkReal> x487 = IKatan2WithCheck(IkReal(((-0.0032898647118555)+(((-0.01786125059808)*x463))+(((-1.0)*x484))+(((-1.0)*x472))+x485+(((0.0156407459861152)*x462))+(((-0.0126292500574872)*cj2))+(((0.00572781945844)*sj2)))),IkReal(((-0.0243708499407997)+(((-1.0)*x466*x467))+(((-1.0)*x467*x470))+(((-1.0)*x484))+(((0.0069014305990472)*cj2))+(((0.01786125059808)*x462))+x485+x472+(((0.0310002683939994)*pz))+(((0.0156407459861152)*x463))+(((-0.0183570695159272)*sj2))+(((-1.0)*x467*x469))+((x464*x467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x487.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x486.value)))+(x487.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x488=IKcos(j1);
IkReal x489=IKsin(j1);
IkReal x490=((0.707106781186548)*pz);
IkReal x491=((0.14422676)*cj2);
IkReal x492=(cj0*py);
IkReal x493=((0.05422276)*sj2);
IkReal x494=((0.14422676)*sj2);
IkReal x495=(cj0*px);
IkReal x496=((0.05422276)*cj2);
IkReal x497=(px*sj0);
IkReal x498=(py*sj0);
IkReal x499=((0.06363961)*x488);
IkReal x500=((0.5)*x497);
IkReal x501=((0.06363961)*x489);
IkReal x502=((0.5)*x498);
IkReal x503=((0.5)*x495);
IkReal x504=((0.5)*x492);
IkReal x505=((0.0219205)*x488);
IkReal x506=((0.0219205)*x489);
IkReal x507=((0.5)*x489);
IkReal x508=((0.12727922)*x489);
IkReal x509=((0.5)*x488);
IkReal x510=(x488*x490);
IkReal x511=(x489*x490);
IkReal x512=((0.0219205)+x500);
IkReal x513=(x488*x500);
IkReal x514=(x489*x503);
IkReal x515=(x489*x502);
IkReal x516=(x489*x504);
IkReal x517=(x488*x504);
IkReal x518=(x488*x503);
IkReal x519=(x488*x502);
IkReal x520=(x489*x500);
IkReal x521=(x505+x513);
IkReal x522=(x506+x520+x510);
IkReal x523=(x501+x502+x503+x504);
IkReal x524=(x516+x515+x514);
IkReal x525=(x519+x518+x517+x511);
evalcond[0]=(((x488*x491))+((x488*x493))+(((-1.0)*x499))+(((-1.0)*x489*x494))+((x489*x496))+(((-1.0)*x523))+x490+x512);
evalcond[1]=((((-1.0)*x488*x496))+((x488*x494))+(((-1.0)*x490))+((x489*x491))+((x489*x493))+(((-1.0)*x523))+x499+x512);
evalcond[2]=((0.0146806993654221)+(((-1.0)*(px*px)))+((x497*x508))+(((-1.0)*x495*x508))+(((0.00558004828402)*x489))+(((0.179999999132269)*pz*x488))+(((-1.0)*(pz*pz)))+(((-1.0)*x492*x508))+(((0.043841)*x498))+(((0.043841)*x495))+(((0.043841)*x492))+(((-1.0)*(py*py)))+(((-1.0)*x498*x508))+(((-0.043841)*x497)));
evalcond[3]=((-0.06363961)+(((-1.0)*x525))+(((-1.0)*x524))+x493+x491+x522+x521);
evalcond[4]=((0.06363961)+(((-1.0)*x496))+(((-1.0)*x522))+(((-1.0)*x525))+x494+x521+x524);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x526=py*py;
IkReal x527=px*px;
IkReal x528=cj2*cj2;
IkReal x529=cj0*cj0;
IkReal x530=(px*py);
IkReal x531=(cj2*sj2);
IkReal x532=((0.045002)*cj2);
IkReal x533=(cj0*px);
IkReal x534=(cj0*py);
IkReal x535=(px*sj0);
IkReal x536=((0.707106781186548)*pz);
IkReal x537=(py*sj0);
IkReal x538=((0.09922476)*sj2);
IkReal x539=((0.5)*(pz*pz));
IkReal x540=((0.0219205)*x534);
IkReal x541=((0.0219205)*x533);
IkReal x542=((0.5)*x530);
IkReal x543=((0.0219205)*x537);
IkReal x544=((0.25)*x527);
IkReal x545=((0.0219205)*x535);
IkReal x546=((0.25)*x526);
IkReal x547=((0.5)*cj0*sj0);
IkReal x548=(x527*x547);
IkReal x549=(x526*x547);
IkReal x550=(x544+x545+x546+x549);
IkReal x551=(x540+x541+x542+x543+x548);
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal(((-0.0065095993427197)+(((-1.0)*x534*x536))+(((-1.0)*x533*x536))+(((-0.0156407459861152)*x531))+(((-1.0)*x551))+(((-0.01786125059808)*x528))+(((0.0310002683939994)*pz))+x550+x539+(((0.0183570695159272)*cj2))+((x535*x536))+(((0.0069014305990472)*sj2))+((x529*x530))+(((-1.0)*x536*x537)))),IkReal(((-0.0042508813523555)+(((-1.0)*x529*x530))+(((0.0156407459861152)*x528))+(((-0.01786125059808)*x531))+(((-1.0)*x550))+x551+x539+(((-0.0126292500574872)*cj2))+(((0.00572781945844)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
CheckValue<IkReal> x553=IKPowWithIntegerCheck(IKsign(((((-1.0)*x532*x533))+(((-1.0)*x532*x534))+(((-1.0)*x532*x537))+(((0.00435011270316)*sj2))+(((-1.0)*x537*x538))+(((-1.0)*x534*x538))+(((-1.0)*x533*x538))+(((0.063642438733914)*pz*sj2))+(((-0.140325001315215)*cj2*pz))+(((0.001972932682)*cj2))+((x535*x538))+((x532*x535))+(((0.0899999995661344)*pz)))),-1);
if(!x553.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x552.value)+(((1.5707963267949)*(x553.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x554=IKcos(j1);
IkReal x555=IKsin(j1);
IkReal x556=((0.707106781186548)*pz);
IkReal x557=((0.14422676)*cj2);
IkReal x558=(cj0*py);
IkReal x559=((0.05422276)*sj2);
IkReal x560=((0.14422676)*sj2);
IkReal x561=(cj0*px);
IkReal x562=((0.05422276)*cj2);
IkReal x563=(px*sj0);
IkReal x564=(py*sj0);
IkReal x565=((0.06363961)*x554);
IkReal x566=((0.5)*x563);
IkReal x567=((0.06363961)*x555);
IkReal x568=((0.5)*x564);
IkReal x569=((0.5)*x561);
IkReal x570=((0.5)*x558);
IkReal x571=((0.0219205)*x554);
IkReal x572=((0.0219205)*x555);
IkReal x573=((0.5)*x555);
IkReal x574=((0.12727922)*x555);
IkReal x575=((0.5)*x554);
IkReal x576=(x554*x556);
IkReal x577=(x555*x556);
IkReal x578=((0.0219205)+x566);
IkReal x579=(x554*x566);
IkReal x580=(x555*x569);
IkReal x581=(x555*x568);
IkReal x582=(x555*x570);
IkReal x583=(x554*x570);
IkReal x584=(x554*x569);
IkReal x585=(x554*x568);
IkReal x586=(x555*x566);
IkReal x587=(x579+x571);
IkReal x588=(x576+x572+x586);
IkReal x589=(x570+x568+x569+x567);
IkReal x590=(x580+x581+x582);
IkReal x591=(x577+x583+x584+x585);
evalcond[0]=(((x554*x559))+((x554*x557))+(((-1.0)*x555*x560))+x556+x578+(((-1.0)*x589))+((x555*x562))+(((-1.0)*x565)));
evalcond[1]=(((x555*x557))+((x555*x559))+(((-1.0)*x556))+x578+x565+(((-1.0)*x554*x562))+((x554*x560))+(((-1.0)*x589)));
evalcond[2]=((0.0146806993654221)+(((-1.0)*(px*px)))+(((0.043841)*x558))+((x563*x574))+(((0.179999999132269)*pz*x554))+(((-1.0)*x561*x574))+(((-1.0)*x558*x574))+(((-1.0)*x564*x574))+(((-0.043841)*x563))+(((0.043841)*x561))+(((0.043841)*x564))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.00558004828402)*x555)));
evalcond[3]=((-0.06363961)+(((-1.0)*x590))+(((-1.0)*x591))+x559+x557+x587+x588);
evalcond[4]=((0.06363961)+(((-1.0)*x591))+x560+x587+x590+(((-1.0)*x588))+(((-1.0)*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x592=(cj2*pz);
IkReal x593=(px*sj0);
IkReal x594=((0.09922476)*cj2);
IkReal x595=(py*sj0);
IkReal x596=(cj0*px);
IkReal x597=((0.045002)*cj2);
IkReal x598=(pz*sj2);
IkReal x599=((0.09922476)*sj2);
IkReal x600=((0.045002)*sj2);
IkReal x601=(cj0*py);
CheckValue<IkReal> x602=IKPowWithIntegerCheck(IKsign(((0.0318414659240194)+(((-0.0252585001149744)*cj2))+(((0.01145563891688)*sj2)))),-1);
if(!x602.valid){
continue;
}
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(((0.00279002414201)+((x594*x595))+((x594*x596))+((x594*x601))+((x593*x600))+(((-1.0)*x596*x600))+(((0.063642438733914)*x592))+(((0.001972932682)*sj2))+(((-1.0)*x593*x594))+(((-1.0)*x600*x601))+(((0.06363961)*x593))+(((-0.06363961)*x595))+(((-0.06363961)*x596))+(((-0.06363961)*x601))+(((0.140325001315215)*x598))+(((-1.0)*x595*x600))+(((-0.00435011270316)*cj2)))),IkReal((((x595*x599))+((x595*x597))+(((-0.001972932682)*cj2))+(((0.063642438733914)*x598))+((x597*x601))+(((-1.0)*x593*x599))+(((-1.0)*x593*x597))+(((-0.00435011270316)*sj2))+((x596*x597))+((x596*x599))+((x599*x601))+(((0.0899999995661344)*pz))+(((-0.140325001315215)*x592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x602.value)))+(x603.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x604=IKcos(j1);
IkReal x605=IKsin(j1);
IkReal x606=((0.707106781186548)*pz);
IkReal x607=((0.14422676)*cj2);
IkReal x608=(cj0*py);
IkReal x609=((0.05422276)*sj2);
IkReal x610=((0.14422676)*sj2);
IkReal x611=(cj0*px);
IkReal x612=((0.05422276)*cj2);
IkReal x613=(px*sj0);
IkReal x614=(py*sj0);
IkReal x615=((0.06363961)*x604);
IkReal x616=((0.5)*x613);
IkReal x617=((0.06363961)*x605);
IkReal x618=((0.5)*x614);
IkReal x619=((0.5)*x611);
IkReal x620=((0.5)*x608);
IkReal x621=((0.0219205)*x604);
IkReal x622=((0.0219205)*x605);
IkReal x623=((0.5)*x605);
IkReal x624=((0.12727922)*x605);
IkReal x625=((0.5)*x604);
IkReal x626=(x604*x606);
IkReal x627=(x605*x606);
IkReal x628=((0.0219205)+x616);
IkReal x629=(x604*x616);
IkReal x630=(x605*x619);
IkReal x631=(x605*x618);
IkReal x632=(x605*x620);
IkReal x633=(x604*x620);
IkReal x634=(x604*x619);
IkReal x635=(x604*x618);
IkReal x636=(x605*x616);
IkReal x637=(x621+x629);
IkReal x638=(x626+x622+x636);
IkReal x639=(x618+x619+x617+x620);
IkReal x640=(x632+x630+x631);
IkReal x641=(x627+x634+x635+x633);
evalcond[0]=(((x604*x609))+((x604*x607))+((x605*x612))+(((-1.0)*x639))+(((-1.0)*x605*x610))+(((-1.0)*x615))+x606+x628);
evalcond[1]=(((x605*x609))+((x605*x607))+(((-1.0)*x639))+(((-1.0)*x604*x612))+x615+x628+(((-1.0)*x606))+((x604*x610)));
evalcond[2]=((0.0146806993654221)+(((0.179999999132269)*pz*x604))+(((0.043841)*x614))+(((0.043841)*x611))+(((-1.0)*(px*px)))+(((-0.043841)*x613))+(((-1.0)*x611*x624))+((x613*x624))+(((-1.0)*x614*x624))+(((-1.0)*(pz*pz)))+(((0.00558004828402)*x605))+(((-1.0)*(py*py)))+(((0.043841)*x608))+(((-1.0)*x608*x624)));
evalcond[3]=((-0.06363961)+(((-1.0)*x640))+(((-1.0)*x641))+x607+x609+x637+x638);
evalcond[4]=((0.06363961)+(((-1.0)*x638))+(((-1.0)*x641))+(((-1.0)*x612))+x640+x610+x637);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "434a88e5c5e93045399a10eca8505077"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
